from turtle import width
import dash
from dash import html, dcc, callback, Input, Output
import pandas as pd
import dash_bootstrap_components as dbc
import plotly.express as px
import LoraLogger
from distutils.log import INFO
import json
import textwrap

dash.register_page(__name__, path='/investments')
logger = LoraLogger.logger(__name__, INFO)
data_df = pd.read_excel('../utils/FAI_results.xlsx')

columns = [
    "17. How long have you been investing in stocks until now, aside from MPFs?‚Äù",
    "19. How many different (company) stocks are you holding at the moment?",
    "20. Do you value your own judgment more than financial advice generated by computer algorithms?",
    "22. What is the portion of stocks in your portfolio that you are NOT familiar with?",
    "23. What advice from a financial professional would be the most valuable to you?"
]

with open('utils/demo_mapping.json', 'r') as f:
    demo_mapping = json.load(f)
with open('utils/demo_groups.json', 'r') as f:
    demo_groups = json.load(f)

nested = [
    "18. Which problems have you encountered in the past 1 year? (You can choose more than one answer)",
    "21. If you were to put HK$10,000 in a stock that was recommended by a financial advisor, what kind of information would help you make decisions?(Please select 2 MOST IMPORTANT)"
]

for nest in nested:
    data_df[nest] = data_df[nest].apply(lambda x: x[1:-1].split(','))

layout = html.Div(children=[
    html.H5(
        children='Investment Behaviours',
        style={
            'textAlign': 'center',
            'margin-top': '15px'
        }
    ),
    dcc.Loading(
        id="inv-loading",
        children=[html.Div(id='fig_inv', style={
                           'textAlign': 'center', 'height': '100vh'})],
        type="cube",
        color="#E939B8"
    )
])


@callback(
    Output(component_id='fig_inv', component_property='children'),
    [
        Input(component_id='demograph', component_property='value'),
        Input(component_id='groups', component_property='value'),
        Input(component_id='percent', component_property='value')
    ]
)
def update_graph(demo, gps, percent):
    histnorm = None
    if percent:
        histnorm = 'percent'
    if gps == None or gps == []:
        return html.H3('Please select groups to show')
    charts = []

    for idx, col in enumerate(columns):

        temp_df = data_df[[demo, col]].copy()
        temp_df = temp_df[temp_df[demo].isin(gps)]

        temp_df = temp_df.groupby(
            [demo, col], as_index=False).size()
        if col in demo_groups.keys():
            sort_dict = {
                col: [i['value'] for i in demo_groups[col]],
                demo: [i['value'] for i in demo_groups[demo]]
            }
        else:
            sort_dict = {
                demo: [i['value'] for i in demo_groups[demo]]
            }
        fig1 = px.histogram(
            temp_df,
            x=col,
            y='size',
            color=demo,
            histnorm=histnorm,
            barmode="group",
            labels={
                col: next(i for i in demo_mapping if i['value'] == col)[
                    'label'],
                'sum of size': 'count',
                demo: next(i for i in demo_mapping if i['value'] == demo)[
                    'label']
            },
            category_orders=sort_dict,
            title='<br>'.join(textwrap.wrap(col, width=80))
        ).update_layout(plot_bgcolor='rgba(0, 0, 0, 0)', paper_bgcolor='rgba(0, 0, 0, 0)')
        charts.append(dcc.Graph(
            id=f"fig{idx}",
            figure=fig1,
            style={'display': 'inline-block'}
        ))
    temp_charts = []
    for nest in nested:
        temp_df = data_df[[demo, nest]].copy()
        temp_df = temp_df[temp_df[demo].isin(gps)]
        temp_df = temp_df.explode(nest)
        temp_df = temp_df.groupby(
            [demo, nest], as_index=False).size()
        fig2 = px.histogram(
            temp_df,
            x=nest,
            y='size',
            color=demo,
            histnorm=histnorm,
            barmode="group",
            labels={
                nest: next(i for i in demo_mapping if i['value'] == nest)[
                    'label'],
                'sum of size': 'count',
                demo: next(i for i in demo_mapping if i['value'] == demo)[
                    'label']
            },
            category_orders={
                demo: [i['value'] for i in demo_groups[demo]]
            },
            title='<br>'.join(textwrap.wrap(nest, width=80))
        ).update_layout(plot_bgcolor='rgba(0, 0, 0, 0)', paper_bgcolor='rgba(0, 0, 0, 0)')
        temp_charts.append(dcc.Graph(
            id=f"fig_custom_2",
            figure=fig2,
            style={'display': 'inline-block'}
        ))
    charts.insert(-2, temp_charts[1])
    charts.insert(1, temp_charts[0])

    return charts
